# Generated by Django 4.1.2 on 2022-10-26 21:04

import cmm.models.base.unique_mixin
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'authorization user',
                'verbose_name_plural': 'authorization users',
                'db_table': 'cmm_authuser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            options={
                'verbose_name': 'authorization group',
                'verbose_name_plural': 'authorization group',
                'db_table': 'cmm_authgroup',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('category', models.CharField(max_length=32, verbose_name='category')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='category name')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'db_table': 'cmm_category',
                'ordering': ['category'],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('valid_from', models.DateField(default=datetime.date.today, verbose_name='valid from')),
                ('valid_through', models.DateField(blank=True, null=True, verbose_name='valid through')),
                ('code', models.CharField(max_length=6, verbose_name='city code')),
                ('name', models.CharField(blank=True, max_length=32, verbose_name='city')),
                ('name_kana', models.CharField(blank=True, max_length=32, verbose_name='city kana')),
                ('pref_name', models.CharField(max_length=32, verbose_name='todofuken')),
                ('pref_name_kana', models.CharField(max_length=32, verbose_name='todofuken kana')),
            ],
            options={
                'verbose_name': 'shikuchoson',
                'verbose_name_plural': 'shikuchosons',
                'db_table': 'cmm_tst_city',
                'ordering': ['code'],
                'permissions': [('export_csv_cmm_tst_city', 'Can export shikuchoson csv'), ('import_csv_cmm_tst_city', 'Can import shikuchoson csv')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=32, verbose_name='code')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='code name')),
                ('abbr', models.CharField(blank=True, max_length=128, null=True, verbose_name='abbreviation')),
                ('display_order', models.IntegerField(blank=True, null=True, verbose_name='display order')),
            ],
            options={
                'verbose_name': 'code',
                'verbose_name_plural': 'codes',
                'db_table': 'cmm_code',
                'ordering': ['category', 'display_order'],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CsvLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_level', models.CharField(choices=[('info', 'Information'), ('warn', 'Warning'), ('error', 'Error')], default='info', max_length=5, verbose_name='csv log level')),
                ('log_type', models.CharField(choices=[('import', 'Csv Import'), ('export', 'Csv Export')], default='import', max_length=12, verbose_name='csv log type')),
                ('edit_type', models.CharField(choices=[('insert', 'insert'), ('update', 'update')], default='insert', max_length=12, verbose_name='csv edit type')),
                ('file_name', models.CharField(blank=True, max_length=120, null=True, verbose_name='file name')),
                ('row_no', models.IntegerField(blank=True, null=True, verbose_name='row no')),
                ('row_content', models.TextField(blank=True, null=True, verbose_name='row content')),
                ('message', models.CharField(blank=True, max_length=2048, null=True, verbose_name='message')),
                ('creator', models.CharField(blank=True, max_length=120, null=True, verbose_name='creator')),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='create time')),
                ('lot_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='lot number')),
            ],
            options={
                'verbose_name': 'csv log',
                'verbose_name_plural': 'csv logs',
                'db_table': 'cmm_csv_log',
                'ordering': ['-create_time'],
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=64, verbose_name='employee code')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='name')),
                ('name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='name kana')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('employ_date', models.DateField(default=django.utils.timezone.now, verbose_name='employ date')),
                ('resign_date', models.DateField(blank=True, null=True, verbose_name='resign date')),
                ('resign_reason', models.CharField(blank=True, max_length=128, null=True, verbose_name='resign reason')),
            ],
            options={
                'verbose_name': 'employee',
                'verbose_name_plural': 'employees',
                'db_table': 'cmm_employee',
                'ordering': ['code'],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCategory',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('category', models.CharField(max_length=32, verbose_name='category')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='category name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical category',
                'verbose_name_plural': 'historical categories',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCode',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=32, verbose_name='code')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='code name')),
                ('abbr', models.CharField(blank=True, max_length=128, null=True, verbose_name='abbreviation')),
                ('display_order', models.IntegerField(blank=True, null=True, verbose_name='display order')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical code',
                'verbose_name_plural': 'historical codes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEmployee',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=64, verbose_name='employee code')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='name')),
                ('name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='name kana')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('employ_date', models.DateField(default=django.utils.timezone.now, verbose_name='employ date')),
                ('resign_date', models.DateField(blank=True, null=True, verbose_name='resign date')),
                ('resign_reason', models.CharField(blank=True, max_length=128, null=True, verbose_name='resign reason')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical employee',
                'verbose_name_plural': 'historical employees',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrganization',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=64, verbose_name='organization code')),
                ('name', models.CharField(max_length=128, verbose_name='organization')),
                ('abbr', models.CharField(blank=True, max_length=128, null=True, verbose_name='abbreviation')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical organization',
                'verbose_name_plural': 'historical organizations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrganizationRel',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical organization relation',
                'verbose_name_plural': 'historical organization relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrgMember',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('is_main_duty', models.BooleanField(default=True, verbose_name='is main duty')),
                ('is_manager', models.BooleanField(default=False, verbose_name='is manager')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is staff')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical membership',
                'verbose_name_plural': 'historical memberships',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerson',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('first_name', models.CharField(max_length=128, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='middle name')),
                ('last_name', models.CharField(max_length=128, verbose_name='last name')),
                ('first_name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='名（カナ）')),
                ('last_name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='姓（カナ）')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birth day')),
                ('email', models.EmailField(blank=True, max_length=256, null=True, verbose_name='email')),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='phone number')),
                ('mobile', models.CharField(blank=True, max_length=32, null=True, verbose_name='mobile phone')),
                ('address', models.CharField(blank=True, max_length=128, null=True, verbose_name='address')),
                ('my_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='my number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical person',
                'verbose_name_plural': 'historical persons',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalShikuchoson',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=6, verbose_name='shikuchoson code')),
                ('name', models.CharField(blank=True, max_length=32, verbose_name='shikuchoson')),
                ('name_kana', models.CharField(blank=True, max_length=32, verbose_name='shikuchoson kana')),
                ('pref_name', models.CharField(max_length=32, verbose_name='todofuken')),
                ('pref_name_kana', models.CharField(max_length=32, verbose_name='todofuken kana')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical shikuchoson',
                'verbose_name_plural': 'historical shikuchosons',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalZipCode',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('zipcode', models.CharField(blank=True, max_length=7, null=True, verbose_name='zipcode')),
                ('machiikimei', models.CharField(blank=True, max_length=128, null=True, verbose_name='町域名')),
                ('machiikimei_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='町域名（カナ）')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical zipcode',
                'verbose_name_plural': 'historical zipcode',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=64, verbose_name='organization code')),
                ('name', models.CharField(max_length=128, verbose_name='organization')),
                ('abbr', models.CharField(blank=True, max_length=128, null=True, verbose_name='abbreviation')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'db_table': 'cmm_organization',
                'permissions': [('export_csv_cmm_organization', 'Can export cmm_organization'), ('import_csv_cmm_organization', 'Can import cmm_organization')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrganizationRel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
            ],
            options={
                'verbose_name': 'organization relation',
                'verbose_name_plural': 'organization relation',
                'db_table': 'cmm_organization_rel',
                'permissions': [('export_csv_cmm_organization_rel', 'Can export cmm_organization_rel'), ('import_csv_cmm_organization_rel', 'Can import cmm_organization_rel')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrgMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('is_main_duty', models.BooleanField(default=True, verbose_name='is main duty')),
                ('is_manager', models.BooleanField(default=False, verbose_name='is manager')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is staff')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'db_table': 'cmm_org_member',
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('first_name', models.CharField(max_length=128, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='middle name')),
                ('last_name', models.CharField(max_length=128, verbose_name='last name')),
                ('first_name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='名（カナ）')),
                ('last_name_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='姓（カナ）')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birth day')),
                ('email', models.EmailField(blank=True, max_length=256, null=True, verbose_name='email')),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='phone number')),
                ('mobile', models.CharField(blank=True, max_length=32, null=True, verbose_name='mobile phone')),
                ('address', models.CharField(blank=True, max_length=128, null=True, verbose_name='address')),
                ('my_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='my number')),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'persons',
                'db_table': 'cmm_person',
                'permissions': [('export_csv_address', 'Can export address'), ('import_csv_address', 'Can import address')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Shikuchoson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('code', models.CharField(max_length=6, verbose_name='shikuchoson code')),
                ('name', models.CharField(blank=True, max_length=32, verbose_name='shikuchoson')),
                ('name_kana', models.CharField(blank=True, max_length=32, verbose_name='shikuchoson kana')),
                ('pref_name', models.CharField(max_length=32, verbose_name='todofuken')),
                ('pref_name_kana', models.CharField(max_length=32, verbose_name='todofuken kana')),
            ],
            options={
                'verbose_name': 'shikuchoson',
                'verbose_name_plural': 'shikuchosons',
                'db_table': 'cmm_city',
                'ordering': ['code'],
                'permissions': [('export_csv_shikuchoson', 'Can export shikuchoson csv'), ('import_csv_shikuchoson', 'Can import shikuchoson csv')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True, verbose_name='version')),
                ('create_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='create time')),
                ('creator', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='creator')),
                ('update_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='update time')),
                ('updater', models.CharField(blank=True, editable=False, max_length=120, null=True, verbose_name='updater')),
                ('valid_flag', models.BooleanField(default=True, verbose_name='valid')),
                ('zipcode', models.CharField(blank=True, max_length=7, null=True, verbose_name='zipcode')),
                ('machiikimei', models.CharField(blank=True, max_length=128, null=True, verbose_name='町域名')),
                ('machiikimei_kana', models.CharField(blank=True, max_length=128, null=True, verbose_name='町域名（カナ）')),
                ('shikuchoson', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.shikuchoson', verbose_name='shikuchoson')),
            ],
            options={
                'verbose_name': 'zipcode',
                'verbose_name_plural': 'zipcode',
                'db_table': 'cmm_zipcode',
                'ordering': ['zipcode', 'shikuchoson', 'machiikimei'],
                'permissions': [('export_csv_zipcode', 'Can export zipcode'), ('import_csv_zipcode', 'Can import zipcode')],
            },
            bases=(cmm.models.base.unique_mixin.UniqueConstraintMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='shikuchoson',
            constraint=models.UniqueConstraint(fields=('code',), name='cmm_city_unique'),
        ),
        migrations.AddField(
            model_name='person',
            name='sex',
            field=models.ForeignKey(blank=True, limit_choices_to={'category__category': 'sex'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.code', verbose_name='sex'),
        ),
        migrations.AddField(
            model_name='person',
            name='shikuchoson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.shikuchoson', verbose_name='shikuchoson'),
        ),
        migrations.AddField(
            model_name='person',
            name='zipcode',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.zipcode', verbose_name='zipcode'),
        ),
        migrations.AddField(
            model_name='orgmember',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.employee', verbose_name='employee'),
        ),
        migrations.AddField(
            model_name='orgmember',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='organizationrel',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='child', to='cmm.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='organizationrel',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent', to='cmm.organization', verbose_name='parent organization'),
        ),
        migrations.AddField(
            model_name='organization',
            name='rank',
            field=models.ForeignKey(blank=True, limit_choices_to={'category__category': 'org_rank'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='cmm.code', verbose_name='organization hierarchy'),
        ),
        migrations.AddField(
            model_name='organization',
            name='relation',
            field=models.ManyToManyField(blank=True, through='cmm.OrganizationRel', to='cmm.organization', verbose_name='parent organization'),
        ),
        migrations.AddField(
            model_name='historicalzipcode',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalzipcode',
            name='shikuchoson',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.shikuchoson', verbose_name='shikuchoson'),
        ),
        migrations.AddField(
            model_name='historicalshikuchoson',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='sex',
            field=models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'category__category': 'sex'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.code', verbose_name='sex'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='shikuchoson',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.shikuchoson', verbose_name='shikuchoson'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='zipcode',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.zipcode', verbose_name='zipcode'),
        ),
        migrations.AddField(
            model_name='historicalorgmember',
            name='employee',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.employee', verbose_name='employee'),
        ),
        migrations.AddField(
            model_name='historicalorgmember',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalorgmember',
            name='organization',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='historicalorganizationrel',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalorganizationrel',
            name='org',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='historicalorganizationrel',
            name='parent',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.organization', verbose_name='parent organization'),
        ),
        migrations.AddField(
            model_name='historicalorganization',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalorganization',
            name='rank',
            field=models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'category__category': 'org_rank'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.code', verbose_name='organization hierarchy'),
        ),
        migrations.AddField(
            model_name='historicalemployee',
            name='auth_user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='authorization user'),
        ),
        migrations.AddField(
            model_name='historicalemployee',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcode',
            name='category',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cmm.category', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='historicalcode',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcategory',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='employee',
            name='auth_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='authorization user'),
        ),
        migrations.AddField(
            model_name='employee',
            name='organizations',
            field=models.ManyToManyField(through='cmm.OrgMember', to='cmm.organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='code',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmm.category', verbose_name='category'),
        ),
        migrations.AddConstraint(
            model_name='city',
            constraint=models.UniqueConstraint(fields=('code', 'valid_from'), name='cmm_tst_city_unique'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('category',), name='cmm_category_unique'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='zipcode',
            constraint=models.UniqueConstraint(fields=('zipcode', 'shikuchoson', 'machiikimei'), name='cmm_zipcode_unique'),
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.UniqueConstraint(fields=('first_name', 'last_name', 'birthday', 'zipcode'), name='cmm_person_unique'),
        ),
        migrations.AddConstraint(
            model_name='orgmember',
            constraint=models.UniqueConstraint(fields=('employee', 'organization'), name='cmm_org_member_unique'),
        ),
        migrations.AddConstraint(
            model_name='organizationrel',
            constraint=models.UniqueConstraint(fields=('org', 'parent'), name='cmm_organization_rel_unique'),
        ),
        migrations.AddConstraint(
            model_name='organization',
            constraint=models.UniqueConstraint(fields=('code',), name='cmm_organization_unique'),
        ),
        migrations.AddConstraint(
            model_name='employee',
            constraint=models.UniqueConstraint(fields=('code',), name='cmm_employee_unique'),
        ),
        migrations.AddConstraint(
            model_name='code',
            constraint=models.UniqueConstraint(fields=('category', 'code'), name='cmm_code_unique'),
        ),
    ]
